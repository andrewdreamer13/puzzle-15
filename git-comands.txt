git config --global user.name "Your Name" - set user name
   git config --global user.email "your_email@whatever.com" - set user email
   git config - check git information
   git config user.name - check user name in git repository
   git config user.email - check user email in git repository
    
   git --version  - checking git version
   git init - start git
   git status - shows status of project in git repository 
   git add . - adds folders to the staging area
   git reset HEAD - command to unstage changes.write after git add 
   git reset --hard HEAD^ - removes the last commits
   git reset --hard HEAD~2 - removes the last two commits.
   git reflog - shows all commits(shows commit's hashes) even deleted commits.then git checkout< hash> .git branch <new branch>< hash>.on main mergering with new branch
   git commit -m "comment"-  adds folders to the repository with some comments
   git commit -am "comment" - one comannd instad of two -( git add .) ( git commit -m "comment")
   git commit --amend -m "new text" - changing text in commit
   git log - shows all the commits in the project with its full information 
   git log --pretty=oneline - shows all the commits in the project with its full information every commit in one line
   git checkout <commit hash> - goes to the one of version in the project 
   git checkout <master> - goes back to the last commit in the project 

   git branch <branch name> - creates new branch 
   git checkout <branch name> - goes to the one of branches in the project (main, master...) 
   git checkout -b <branch name> - creating a new branch and moving to it 
   git branch - shows branch list  
   git branch -m <new branch name> - renaming the current branch 
   git branch -d <branch name> - deleting a branch (except the current branch) 
   git merge <branch name> - branch merging with the current branch 
   git merge -m "message" <branch name> - branch merging with the current branch and with a comment 
   git rebase <branch name> -  branch merging with the current branch . But without commits from the inmergered branch

   cd <folder name> - goes to the pointed folder in the project 
   cd .. returns to the root folder in the project 
   git cat-file -t <hash> - shoes type of the git object 
   git cat-file -p <hash> - shoes content(folders and files) of the git object 
   rm <name of folder or file> - removes folders and files from project 
   mkdir <name of folder> - creates new folder in the project  
   echo <text> > <name of file> - creates content in the pointed file 
   ls - shows all folders and files in the project  

   origin - a remote repository name (https://github.com/andrewdreamer13/test)
   git clone <URL> - cloning a remote repository to my computer 
   git branch -a - to see all the branches on the remote repository 
   git pull origin main - download changes from the remote branch in gitHub to the local branch 
   git push - upload changes from the local branch to the remote branch 
   git remote add origin <URL> - adding a remote repository on gitHub 
   git push -u origin main - uploading changes from a local branch to a remote branch(for the first pushing on githab.Then use git push)
   git push --set-upstream origin <branch name> - uploading changes from a local new branch to a remote branch(for the first pushing on githab.Then use git push)
   git remote -v - shows address of the remote repository -->
   git branch -vv - shows conection local branch with remote branch 
   git remote - checking if remote repository exists(if exists,shows its name) 
   pull request -  branch merging in gitHub by Contribute tab